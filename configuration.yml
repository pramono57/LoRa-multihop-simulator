# LORA SPECIFIC
{% set PREAMBLE_DURATION_S = 1000/1000 %} # define variable so it can be used below
{% set Vcc = 3.3 %}

# LORA PHY SPECIFIC
{% set SF = 7 %}
{% set BW = 125 %}
LORA_SF: {{ SF }}
LORA_CRC: 0
LORA_CODE_RATE: 1 # code rate [1-4] default 1
LORA_BANDWIDTH: {{ BW }} # in kHz
LORA_LOW_DATA_RATE_OPTIMIZE: 0 # Low Data Rate Optimize
LORA_IMPLICIT_HEADER: 0 # implicit header
LORA_TRANSMIT_POWER: 2
#{6: -121, 7: -126.5, 8: -129, 9: -131.5, 10: -134, 11: -136.5, 12: -139.5}
LORA_SENSITIVITY: {6: -121, 7: -126.5, 8: -129, 9: -131.5, 10: -134, 11: -136.5, 12: -139.5}
LORA_POWER_THRESHOLD: 6

# SIMULATION PARAMETERS
SIMULATION_RUN_TIME: {{60*60*6}}
NETWORK_SHAPE: "line" # "custom"
#NETWORK_SHAPE: "custom" # "custom"
#NETWORK_SHAPE_FILE: "campus.json"
NETWORK_SIZE_X: 330
NETWORK_SIZE_Y: 330
NETWORK_DENSITY: 110
NETWORK_SIZE_RANDOM: 0
NETWORK_GATEWAY_X: -210
NETWORK_GATEWAY_Y: -210
ENVIRONMENT: "urban"


PREAMBLE_DURATION_S: {{ PREAMBLE_DURATION_S }}

# LINK CHARACTERISTICS
SHADOWING_ENABLED: True
SHADOWING_MU: 0
SHADOWING_SIGMA: 11.25
# https://www.thethingsnetwork.org/docs/lorawan/rssi-and-snr/ with margin
SNR_MARGIN: 15
SNR_MIN_REQUIRED: { 6: -5, 7: -7.5, 8: -10, 9: -12.5, 10: -15, 11: -17.5, 12: -20 }

# GATEWAY SPECIFIC PARAMS
ROUTE_DISCOVERY_S: {{60*60*6}}        # period of transmitting a new beacon for routing
GW_BEACON_PAYLOAD_SIZE_BYTE: 3     #TODO now random value

# SENSOR NODE SPECIFIC PARAMS
MEASURE_INTERVAL_S: {{60*30}}          # how freq. a measurement is taken by the sensor node
MEASURE_DURATION_S: 0.02           # how long takes a measurement
MEASURE_PAYLOAD_SIZE_BYTE: 6

MAX_BUF_SIZE_BYTE: {{ 96+16 }}
MAX_BUF_SIZE_THRESHOLD: 0.75

MAX_SEEN_PACKETS: 32
MAX_ROUTE_SIZE: 8

# timer set when first data in buffer (sense or DL)
TX_AGGREGATION_TIMER_NOMINAL: {{15*60}}
TX_AGGREGATION_TIMER_RANDOM: !!python/tuple [90, 90]
TX_AGGREGATION_TIMER_STEP_UP: 60 #60     # update tx-data-timer when a msg has been received
TX_AGGREGATION_TIMER_STEP_DOWN: 30 #30
TX_AGGREGATION_TIMER_MIN_TIMES_STEP_DOWN: 15     # update tx-data-timer when a msg has been received
TX_AGGREGATION_TIMER_MAX_TIMES_STEP_UP: 30

# timer set when rx-ed beacon
TX_COLLISION_TIMER_NOMINAL: {{ 30*PREAMBLE_DURATION_S }}
TX_COLLISION_TIMER_RANDOM: !!python/tuple [{{ 0.5 }}, {{ 0.5 }}]

CAD_INTERVAL: {{ PREAMBLE_DURATION_S*0.625 }}
CAD_INTERVAL_RANDOM_S: !!python/tuple [{{ PREAMBLE_DURATION_S*0.125 }}, {{ PREAMBLE_DURATION_S*0.125 }}]
# wait min TX_BEACON_COLL_AVOIDANCE_RANDOM before sending a data packet after a beacon was forwarded
TX_BEACON_COLL_AVOIDANCE_RANDOM: !!python/tuple [{{ PREAMBLE_DURATION_S }}, {{ 3*PREAMBLE_DURATION_S }}]

MAX_DELAY_START_PER_NODE_RANDOM_S: {{ 60*45}}  # random wait time till node is active (enters the network)

# Power consumption
POWER_SLEEP_mW: {{ 5.11*Vcc/1000 }}
POWER_TX_mW: {{ 62.9*Vcc }}
POWER_RX_mW: {{ 29.8*Vcc }}
POWER_SENSE_mW: {{ 20*Vcc }} #TODO


{% set TIME_CAD_WAKE_S = 5/1000 %}
{% set TIME_CAD_STABILIZE_S =   2/1000 %}
#{% set TIME_CAD_PERFORM_S =  18.7/1000 %}
{% set TIME_CAD_PERFORM_S =  (2.0 ** SF) / BW / 1000 %}
{% set TIME_CAD_PROC_S =  5.1/1000 %}
{% set TIME_CAD_CYCLE_S = TIME_CAD_WAKE_S+TIME_CAD_STABILIZE_S+TIME_CAD_PERFORM_S+TIME_CAD_PROC_S %}

TIME_CAD_WAKE_S: {{ TIME_CAD_WAKE_S }}
TIME_CAD_STABILIZE_S:  {{ TIME_CAD_STABILIZE_S }}
TIME_CAD_PERFORM_S:   {{ TIME_CAD_PERFORM_S }}
TIME_CAD_PROC_S:   {{ TIME_CAD_PROC_S }}
TIME_CAD_CYCLE_S: {{ TIME_CAD_WAKE_S+TIME_CAD_STABILIZE_S+TIME_CAD_PERFORM_S+TIME_CAD_PROC_S }}

{% set ENERGY_CAD_CYCLE_mJ = (19*TIME_CAD_WAKE_S+ 3.42*TIME_CAD_STABILIZE_S + 7.64*TIME_CAD_PERFORM_S + 5*TIME_CAD_PROC_S)*Vcc %} # wake + stabilize + perform
ENERGY_CAD_CYCLE_mJ: {{ ENERGY_CAD_CYCLE_mJ }}

POWER_CAD_CYCLE_mW: {{ ENERGY_CAD_CYCLE_mJ/TIME_CAD_CYCLE_S}}

#POWER_PROC_mW: {{ 0 }}
